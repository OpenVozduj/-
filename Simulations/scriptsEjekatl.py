def flowConditions(rho, T, p, cp, mu, Pr, U, alpha):
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'rhoinf  '+str(round(rho, 3))+'; \n'
              'Tinlet  '+str(round(T, 2))+'; \n'
              'pOut    '+str(round(p))+'; \n'
              'cpinf   '+str(round(cp))+'; \n'
              'muinf   '+str(round(mu, 5))+'; \n'
              'Prinf   '+str(round(Pr, 2))+'; \n'
              'speed   '+str(round(U, 2))+'; \n'
              'AOA     '+str(alpha)+'; \n'
              '\n'
              'angle	#calc "degToRad($AOA)"; \n'
              '\n'
              'liftDir	#codeStream \n'
              '{ \n'
              '	 codeInclude	#{ #include "vector.H" #}; \n'
              '	 code	#{ os << vector(-::sin($angle), ::cos($angle), 0); #}; \n'
              '}; \n'
              '\n'
              'dragDir	#codeStream \n'
              '{ \n'
              '	 codeInclude	#{ #include "vector.H" #}; \n'
              '	 code	#{ os << vector(::cos($angle), ::sin($angle), 0); #}; \n'
              '}; \n'
              '\n'
              'Uinlet         #codeStream \n'
              '{ \n'
              '   codeInclude #{ #include "vector.H" #}; \n'
              '   code #{ os << $speed*vector(::cos($angle), ::sin($angle), 0); #}; \n'
              '}; \n'
              '\n'
              '//***************************************************************************//']
    scriptName = 'flowConditions'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def U_0():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format    ascii; \n'
              '    class     volVectorField; \n'
              '    object    U; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *// \n'
              '#include "$FOAM_CASE/0/flowConditions" \n'
              '\n'
              'dimensions      [0 1 -1 0 0 0 0]; \n'
              '\n'
              'internalField   uniform $Uinlet; \n'
              '\n'
              'boundaryField \n'
              '{ \n'
              '    airfoil \n'
              '    { \n'
              '        type    noSlip; \n'
              '    } \n'
              '\n'
              '    inlet \n'
              '    { \n'
              '        type               freestreamVelocity; \n'
              '        freestreamValue    uniform $Uinlet; \n'
              '        value              uniform $Uinlet; \n'
              '    } \n'
              '\n'
              '    outlet \n'
              '    { \n'
              '        type               freestreamVelocity; \n'
              '        freestreamValue    uniform $Uinlet; \n'
              '        value              uniform $Uinlet; \n'
              '    } \n'
              '\n'
              '    frontBack \n'
              '    { \n'
              '        type    empty; \n'
              '    } \n'
              '} \n'
              '\n'
              '//***************************************************************************//']
    scriptName = 'U'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def T_0():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format    ascii; \n'
              '    class     volScalarField; \n'
              '    object    T; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *// \n'
              '#include "$FOAM_CASE/0/flowConditions" \n'
              '\n'
              'dimensions      [0 0 0 1 0 0 0]; \n'
              '\n'
              'internalField   uniform $Tinlet; \n'
              '\n'
              'boundaryField \n'
              '{ \n'
              '    airfoil \n'
              '    { \n'
              '        type    zeroGradient; \n'
              '    } \n'
              '\n'
              '    inlet \n'
              '    { \n'
              '        type          inletOutlet; \n'
              '        inletValue    uniform $Tinlet; \n'
              '        value         $inletValue; \n'
              '    } \n'
              '\n'
              '    outlet \n'
              '    { \n'
              '        type          inletOutlet; \n'
              '        inletValue    uniform $Tinlet; \n'
              '        value         $inletValue; \n'
              '    } \n'
              '\n'
              '    frontBack \n'
              '    { \n'
              '        type    empty; \n'
              '    } \n'
              '} \n'
              '\n'
              '//***************************************************************************//']
    scriptName = 'T'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()

def p_0():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format    ascii; \n'
              '    class     volScalarField; \n'
              '    object    p; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *// \n'
              '#include "$FOAM_CASE/0/flowConditions" \n'
              '\n'
              'dimensions      [1 -1 -2 0 0 0 0]; \n'
              '\n'
              'internalField   uniform $pOut; \n'
              '\n'
              'boundaryField \n'
              '{ \n'
              '    airfoil \n'
              '    { \n'
              '        type    zeroGradient; \n'
              '    } \n'
              '\n'
              '    inlet \n'
              '    { \n'
              '        type               freestreamPressure; \n'
              '        freestreamValue    uniform $pOut; \n'
              '    } \n'
              '\n'
              '    outlet \n'
              '    { \n'
              '        type               freestreamPressure; \n'
              '        freestreamValue    uniform $pOut; \n'
              '    } \n'
              '\n'
              '    frontBack \n'
              '    { \n'
              '        type    empty; \n'
              '    } \n'
              '} \n'
              '\n'
              '//***************************************************************************//']
    scriptName = 'p'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def omega_0():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format    ascii; \n'
              '    class     volScalarField; \n'
              '    object    omega; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *// \n'
              'omegaInlet      1; \n'
              '\n'
              'dimensions      [0 0 -1 0 0 0 0]; \n'
              '\n'
              'internalField   uniform $omegaInlet; \n'
              '\n'
              'boundaryField \n'
              '{ \n'
              '    airfoil \n'
              '    { \n'
              '        type     omegaWallFunction; \n'
              '        value    uniform $omegaInlet; \n'
              '    } \n'
              '\n'
              '    inlet \n'
              '    { \n'
              '        type          inletOutlet; \n'
              '        inletValue    uniform $omegaInlet; \n'
              '        value         uniform $omegaInlet; \n'
              '    } \n'
              '\n'
              '    outlet \n'
              '    { \n'
              '        type          inletOutlet; \n'
              '        inletValue    uniform $omegaInlet; \n'
              '        value         uniform $omegaInlet; \n'
              '    } \n'
              '\n'
              '    frontBack \n'
              '    { \n'
              '        type    empty; \n'
              '    } \n'
              '} \n'
              '\n'
              '//***************************************************************************//']
    scriptName = 'omega'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def nut_0():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format    ascii; \n'
              '    class     volScalarField; \n'
              '    object    mut; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *// \n'
              '\n'
              'dimensions      [0 2 -1 0 0 0 0]; \n'
              '\n'
              'internalField   uniform 0; \n'
              '\n'
              'boundaryField \n'
              '{ \n'
              '    airfoil \n'
              '    { \n'
              '        type     nutkWallFunction; \n'
              '        value    uniform 0; \n'
              '    } \n'
              '\n'
              '    inlet \n'
              '    { \n'
              '        type     calculated; \n'
              '        value    uniform 0; \n'
              '    } \n'
              '\n'
              '    outlet \n'
              '    { \n'
              '        type     calculated; \n'
              '        value    uniform 0; \n'
              '    } \n'
              '\n'
              '    frontBack \n'
              '    { \n'
              '        type    empty; \n'
              '    } \n'
              '} \n'
              '\n'
              '//***************************************************************************//']
    scriptName = 'nut'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def k_0():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format    ascii; \n'
              '    class     volScalarField; \n'
              '    object    k; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *// \n'
              'kInlet      1e-3; \n'
              '\n'
              'dimensions      [0 2 -2 0 0 0 0]; \n'
              '\n'
              'internalField   uniform $kInlet; \n'
              '\n'
              'boundaryField \n'
              '{ \n'
              '    airfoil \n'
              '    { \n'
              '        type     kqRWallFunction; \n'
              '        value    uniform $kInlet; \n'
              '    } \n'
              '\n'
              '    inlet \n'
              '    { \n'
              '        type          inletOutlet; \n'
              '        inletValue    uniform $kInlet; \n'
              '        value         uniform $kInlet; \n'
              '    } \n'
              '\n'
              '    outlet \n'
              '    { \n'
              '        type          inletOutlet; \n'
              '        inletValue    uniform $kInlet; \n'
              '        value         uniform $kInlet; \n'
              '    } \n'
              '\n'
              '    frontBack \n'
              '    { \n'
              '        type    empty; \n'
              '    } \n'
              '} \n'
              '\n'
              '//***************************************************************************//']
    scriptName = 'k'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def alphat_0():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format    ascii; \n'
              '    class     volScalarField; \n'
              '    object    alphat; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *// \n'
              '\n'
              'dimensions      [1 -1 -1 0 0 0 0]; \n'
              '\n'
              'internalField   uniform 0; \n'
              '\n'
              'boundaryField \n'
              '{ \n'
              '    airfoil \n'
              '    { \n'
              '        type     compressible::alphatWallFunction; \n'
              '        value    uniform 0; \n'
              '    } \n'
              '\n'
              '    inlet \n'
              '    { \n'
              '        type     calculated; \n'
              '        value    uniform 0; \n'
              '    } \n'
              '\n'
              '    outlet \n'
              '    { \n'
              '        type     calculated; \n'
              '        value    uniform 0; \n'
              '    } \n'
              '\n'
              '    frontBack \n'
              '    { \n'
              '        type    empty; \n'
              '    } \n'
              '} \n'
              '\n'
              '//***************************************************************************//']
    scriptName = 'alphat'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def momentum_transport():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format      ascii; \n'
              '    class       dictionary; \n'
              '    object      momentumTransport; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n'
              '\n'
              'simulationType    RAS; \n'
              '\n'
              'RAS \n'
              '{\n'
              '    model          kOmegaSST; \n'
              '    turbulence     on; \n'
              '    printCoeffs    on; \n'
              '} \n'
              '\n'
              '// ************************************************************************* //']
    scriptName = 'momentumTransport'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def physical_propertiers():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format      ascii; \n'
              '    class       dictionary; \n'
              '    location    "constant"; \n'
              '    object      physicalProperties; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n'
              '\n'
              'thermoType \n'
              '{ \n'
              '    type               hePsiThermo; \n'
              '    mixture            pureMixture; \n'
              '    transport          const; \n'
              '    thermo             hConst; \n'
              '    equationOfState    perfectGas; \n'
              '    specie             specie; \n'
              '    energy             sensibleEnthalpy; \n'
              '} \n'
              '\n'
              '#include "$FOAM_CASE/0/flowConditions"'
              '\n'
              'mixture \n'
              '{ \n'
              '    specie \n'
              '    { \n'
              '        molWeight    28.9; \n'
              '    } \n'
              '\n'
              '    thermodynamics \n'
              '    { \n'
              '        Cp    $cpinf; \n'
              '        Hf    0; \n'
              '    } \n'
              '\n'
              '    transport \n'
              '    { \n'
              '        mu    $muinf; \n'
              '        Pr    $Prinf; \n'
              '    } \n'
              '} \n'
              '\n'
              '// ************************************************************************* //']
    scriptName = 'physicalProperties'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def control_dict(iterations=5000):
   script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
             ' .d88888b.     888     888   | \n'
             'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
             '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
             '888     888    Y88b   d88P   | Version: 1.0 \n'
             '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
             '888     888      Y88o88P     | Samara University \n'
             'Y88b. .d88P       Y888P      | 2024 \n'
             ' "Y88888P"         Y8P       | \n'
             '\*--------------------------------------------------------------------------*/ \n'
             'FoamFile \n'
             '{ \n'
             '    format      ascii; \n'
             '    class       dictionary; \n'
             '    object      controlDict; \n'
             '} \n'
             '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n'
             '\n'
             'application          foamRun; \n'
             '\n'
             'solver               fluid; \n'
             '\n'
             'startFrom            startTime; \n'
             '\n'
             'startTime            0; \n'
             '\n'
             'stopAt               endTime; \n'
             '\n'
             'endTime              '+str(iterations)+'; \n'
             '\n'
             'deltaT               1; \n'
             '\n'
             'writeControl         timeStep; \n'
             '\n'
             'writeInterval        '+str(iterations)+'; \n'
             '\n'
             'purgeWrite           0; \n'
             '\n'
             'writeFormat          ascii; \n'
             '\n'
             'writePrecision       10; \n'
             '\n'
             'writeCompression     off; \n'
             '\n'
             'timeFormat           general; \n'
             '\n'
             'timePrecision        6; \n'
             '\n'
             'runTimeModifiable    true; \n'
             '\n'
             'functions \n'
             '{ \n'
             '    #includeFunc    MachNo \n'
             '    #includeFunc    residuals \n'
             '    #includeFunc    forceCoeffsCompressible \n'
             '}\n'
             '\n'
             '// ************************************************************************* //']
   scriptName = 'controlDict'
   gmt = open(scriptName,'w')
   gmt.writelines(script)
   gmt.close()
   
def decompose_par_dict(cores):
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format    ascii; \n'
              '    class     dictionary; \n'
              '    note      "mesh decomposition control dictionary"; \n'
              '    object    decomposeParDict; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n'
              '\n'
              'numberOfSubdomains    '+str(cores)+'; \n'
              '\n'
              'method    scotch; \n'
              '\n'
              'scotchCoeffs \n'
              '{\n'
              '\n'
              '} \n'
              '// ************************************************************************* //']
    scriptName = 'decomposeParDict'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def force_coeffs(point_moment=0.25):
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              '#include    "$FOAM_CASE/0/flowConditions" \n'
              '\n'
              'writeControl    timeStep; \n'
              'timeInterval    1; \n'
              'log             yes; \n'
              '\n'
              'patches    (airfoil); \n'
              '\n'
              'magUInf    $speed; \n'
              'lRef       1; \n'
              'Aref       1; \n'
              'rhoInf     $rhoinf; \n'
              '\n'
              'CofR         ('+str(point_moment)+' 0 0); \n'
              'pitchAxis    (0 0 1); \n'
              '\n'
              '#includeEtc "caseDicts/postProcessing/forces/forceCoeffs.cfg" \n'
              '\n'
              '// ************************************************************************* //']
    scriptName = 'forceCoeffsCompressible'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def fv_constraints():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format    ascii; \n'
              '    class     dictionary; \n'
              '    object    fvConstraints; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n'
              '\n'
              '#includeConstraint limitPressure(minFactor=0.1, maxFactor=2) \n'
              '#includeConstraint limitTemperature(min=101, max=1000)\n'
              '\n'
              '// ************************************************************************* //']
    scriptName = 'fvConstraints'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def residuals():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              '\n'
              '#includeEtc "caseDicts/postProcessing/numerical/residuals.cfg" \n'
              'fields (p U e k omega); \n'
              '\n'
              '// ************************************************************************* //']
    scriptName = 'residuals'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def fv_schemes():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format      ascii; \n'
              '    class       dictionary; \n'
              '    object      fvSchemes; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n'
              '\n'
              'ddtSchemes \n'
              '{\n'
              '    default    steadyState; \n'
              '}\n'
              '\n'
              'gradSchemes \n'
              '{\n'
              '    default        Gauss linear; \n'
              '    limited        cellLimited Gauss linear 1; \n'
              '    grad(U)        $limited; \n'
              '    grad(k)        $limited; \n'
              '    grad(omega)    $limited; \n'
              '} \n'
              '\n'
              'divSchemes \n'
              '{ \n'
              '    default           none; \n'
              '    div(phi,U)        bounded Gauss linearUpwind limited; \n'
              '\n'
              '    energy            bounded Gauss linearUpwind limited; \n'
              '    div(phi,h)        $energy; \n'
              '    div(phi,K)        $energy; \n'
              '\n'
              '    turbulence        bounded Gauss upwind; \n'
              '    div(phi,k)	     $turbulence; \n'
              '    div(phi,omega)    $turbulence; \n'
              '\n'
              '    div((nuEff*dev2(T(grad(U)))))    Gauss linear; \n'
              '} \n'
              '\n'
              'laplacianSchemes \n'
              '{ \n'
              '    default    Gauss linear corrected; \n'
              '} \n'
              '\n'
              'interpolationSchemes \n'
              '{ \n'
              '    default    linear; \n'
              '} \n'
              '\n'
              'snGradSchemes \n'
              '{ \n'
              '    default    corrected; \n'
              '} \n'
              '\n'
              'wallDist \n'
              '{ \n'
              '    method    meshWave; \n'
              '} \n'
              '\n'
              '// ************************************************************************* //']
    scriptName = 'fvSchemes'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def fv_solution():
    script = ['/*--------------------------------*- C++ -*----------------------------------*\ \n'
              ' .d88888b.     888     888   | \n'
              'd88P" "Y88b    888     888   | OpenVozduj: Software for aerodynamic design \n'
              '888     888    888     888   | Ejekatl: Airfoil database creation with OpenFOAM \n'
              '888     888    Y88b   d88P   | Version: 1.0 \n'
              '888     888     Y88b d88P    | Institute of Aerospace Engineering \n'
              '888     888      Y88o88P     | Samara University \n'
              'Y88b. .d88P       Y888P      | 2024 \n'
              ' "Y88888P"         Y8P       | \n'
              '\*--------------------------------------------------------------------------*/ \n'
              'FoamFile \n'
              '{ \n'
              '    format      ascii; \n'
              '    class       dictionary; \n'
              '    object      fvSolution; \n'
              '} \n'
              '// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n'
              '\n'
              'solvers \n'
              '{\n'
              '    p \n'
              '    { \n'
              '        solver       GAMG; \n'
              '        tolerance    1e-8; \n'
              '        relTol       0.01; \n'
              '        smoother     DIC; \n'
              '    }\n'
              '\n'
              '    "(U|k|omega|h)" \n'
              '    {\n'
              '        solver            PBiCGStab; \n'
              '        preconditioner    DILU; \n'
              '        tolerance         1e-10; \n'
              '        relTol            0.1; \n'
              '    } \n'
              '} \n'
              '\n'
              'PIMPLE \n'
              '{ \n'
              '    residualControl \n'
              '    { \n'
              '        p                1e-4; \n'
              '        U                1e-4; \n'
              '        "(k|omega|h)"    1e-4; \n'
              '    } \n'
              '\n'
              '    nNonOrthogonalCorrectors    0; \n'
              '} \n'
              '\n'
              'relaxationFactors \n'
              '{ \n'
              '    fields \n'
              '    { \n'
              '        p      0.3; \n'
              '        rho    0.01; \n'
              '    } \n'
              '    equations \n'
              '    { \n'
              '        U              0.7; \n'
              '        h              0.7; \n'
              '        "(k|omega)"    0.7; \n'
              '    } \n'
              '} \n'
              '\n'
              '// ************************************************************************* //']
    scriptName = 'fvSolution'
    gmt = open(scriptName,'w')
    gmt.writelines(script)
    gmt.close()
    
def boundary():
    nomb = 'constant/polyMesh/boundary'
    scrb = open(nomb,'r+')
    textb = []
    for line in scrb:
        textb.append(line)
    textb[20] = '        type            empty; \n'
    textb[21] = '        // \n'
    textb[27] = '        type            wall; \n'
    textb[28] = '        // \n'
    textb[35] = '        // \n'
    textb[42] = '        // \n'
    scrb.seek(0)
    scrb.writelines(textb)
    scrb.close()
    
def read_coeffs():
    import numpy as np
    nomc = 'postProcessing/forceCoeffsCompressible/0/forceCoeffs.dat'
    datos = np.loadtxt(nomc,delimiter='\t')
    cd = datos[-1,2]
    cl = datos[-1,3]
    return cd, cl

def dir_0(rho, T, p, cp, mu, Pr, U, alpha):
    flowConditions(rho, T, p, cp, mu, Pr, U, alpha)
    U_0()
    p_0()
    omega_0()
    k_0()
    nut_0()
    T_0()
    alphat_0()
    
def dir_system(cores, maxIter):
    fv_schemes()
    fv_solution()
    force_coeffs()
    decompose_par_dict(cores)
    control_dict(maxIter)
    fv_constraints()
    residuals()
    